library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages(c("AppliedPredictiveModeling", "caret"))
install.packages("Hmisc")
install.packages("ggplot2")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(Hmisc)
?cut2
library(ggplot2)
head(training)
featurePlot(x = training[,-CompressiveStrength], y= training$CompressiveStrength, plot = pairs)
featurePlot(x = training[,-"CompressiveStrength"], y= training$CompressiveStrength, plot = pairs)
featurePlot(x = training[,"CompressiveStrength"], y= training$CompressiveStrength, plot = pairs)
training[,"CompressiveStrength"]
featurePlot(x = training[], y= training$CompressiveStrength, plot = pairs)
head(training)
featurePlot(x = training$Cement, y= training$CompressiveStrength, plot = pairs)
?pairs
head(training)
Str(training)
str(training)
?index
training[23]
training[23,]
inTrain
training$x = inTrain
ggplot(data = training, aes(x = x, y = CompressiveStrength, col = Cement))+geom_point()
ggplot(data = training, aes(x = x, y = CompressiveStrength, col = as.factor(Cement)))+geom_point()
training$Cement2 = cut2(training$Cement,3)
ggplot(data = training, aes(x = x, y = CompressiveStrength, col = as.factor(Cement2)))+geom_point()
?cut2
training$Cement2 = cut2(training$Cement,g=3)
ggplot(data = training, aes(x = x, y = CompressiveStrength, col = as.factor(Cement2)))+geom_point()
str(training)
training$Age2 = cut2(training$Age,g=3)
training$FlyAsh2 = cut2(training$FlyAsh,g=3)
ggplot(data = training, aes(x = x, y = CompressiveStrength, col = as.factor(FlyAsh2)))+geom_point()
ggplot(data = training, aes(x = x, y = CompressiveStrength, col = as.factor(Age2)))+geom_point()
ggplot(data = training, aes(x = x, y = CompressiveStrength, col = as.factor(FlyAsh2)))+geom_point()
training$FlyAsh2 = cut2(training$FlyAsh,g=2)
ggplot(data = training, aes(x = x, y = CompressiveStrength, col = as.factor(FlyAsh2)))+geom_point()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(training)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?preProcess
str(training)
training[ , grepl( "IL" , names( training ) ) ]
test = training[ , grepl( "IL" , names( training ) ) ]
str(test)
preProcess(test, method = "pca", pcaComp)
preProcess(test, method = "pca", pcaComp = 2)
?grepl
names(training)[1:2]
names(training)[,1:2]
names(training)
?substring
substring(names(training),0,2)
test = training[ , grepl( "IL" , substring(names(training),0,2) ) ]
str(test)
?preProcess
preProcess(test, method = "pca", thresh = 0.9)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 = training[ , grepl("IL", substring(names(training),0,2) ) ]
str(training)
training2$diagnosis = training$diagnosis
preProc <- preProcess(training2,method="pca",thresh=0.8)
str(training2)
preProc <- preProcess(training2[,-13],method="pca",thresh=0.8)
trainPC <- predict(preProc,training2[,-13])
modelFit <- train(training2$diagnosis ~ .,method="glm",data=trainPC)
install.packages("e1071")
train(training2$diagnosis~.,method = "glm", data = trainPC)
?train
preProc
trainPC
testing2 = testing[ , grepl("IL", substring(names(testing),0,2) ) ]
testing2$diagnosis = training$diagnosis
testing2$diagnosis = testing$diagnosis
testing2 = testing[ , grepl("IL", substring(names(testing),0,2) ) ]
testing2$diagnosis = testing$diagnosis
trainPC <- predict(preProc,training2[,-13])
testPC <- predict(preProc,testing2[,-13])
confusionMatrix(testing2$diagnosis,predict(modelFit,testPC))
modelFit <- train(training2$diagnosis ~ .,method="glm",data=trainPC)
confusionMatrix(testing2$diagnosis,predict(modelFit,testPC))
modelFit <- train(training2$diagnosis ~ .,method="glm",data=training2)
confusionMatrix(testing2$diagnosis,predict(modelFit,testing2))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
test = training[ , grepl( "IL" , substring(names(training),0,2) ) ]
str(test)
preProcess(test, method = "pca", thresh = 0.8)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(training)
hist(log(training$Superplasticizer+1))
min(log(training$Superplasticizer+1))
min(log(training$Superplasticizer))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
head(segmentationOriginal$Case)
training = segmentationOriginal[segmentationOriginal$Case == "Train",]
training = segmentationOriginal[segmentationOriginal$Case != "Train",]
training = segmentationOriginal[segmentationOriginal$Case == "Train",]
testing = segmentationOriginal[segmentationOriginal$Case != "Train",]
?caret
names(segmentationOriginal)
head(segmentationOriginal$Class)
modelFit <- train(training$Class ~ .,method="rpart",data=training)
modelFit$finalModel
data(segmentationOriginal)
names(segmentationOriginal)
head(segmentationOriginal$Case)
head(segmentationOriginal$Class)
# Subset the data to a training set and testing set based on the Case variable in the data set.
training = segmentationOriginal[segmentationOriginal$Case == "Train",]
testing = segmentationOriginal[segmentationOriginal$Case != "Train",]
set.seed(125)
modelFit <- train(training$Class ~ .,method="rpart",data=training)
modelFit$finalModel
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
?createDataPartition
inTrain = createDataPartition(olive$Area, p = 3/4)[[1]]
training = adData[ inTrain,]
training = olive[ inTrain,]
testing = olive[-inTrain,]
modelFit <- train(training$Area ~ .,method="rpart",data=training)
?rpart
modelFit$finalModel
newdata = as.data.frame(t(colMeans(olive)))
predict(modelFit,newdata)
modelFit <- train(training$Area ~ .,method="rpart",data=olive)
modelFit <- train(olive$Area ~ .,method="rpart",data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modelFit,newdata)
?tree
set.seed(125)
modelFit <- train(olive$Area ~ .,method="rpart",data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modelFit,newdata)
modelFit <- rpart(olive$Area ~ ., data = olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modelFit,newdata)
hist(olive$Area)
olive$Area
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
?train
modelFit <- train(trainSA$chd ~ .,method="glm",family=binomial(), data=trainSA)
head(trainSA)
modelFit <- train(trainSA$chd ~ age+alcohol+obesity+tobacco+typea+ldl,method="glm",family=binomial(), data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predTrain = predict(modelFit, trainSA)
missClass(trainSA$chd, predTrain)
predTest = predict(modelFit, testSA)
missClass(testSA$chd, predTest)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.test)
vowel.test$y = as.factor(vowel.test$y)
vowel.train$y = as.factor(vowel.train$y)
?train
names(getModelInfo())
modelFit <- train(vowel.train$y~.,method="rf", data=vowel.train)
?varImp
modelFit <- train(vowel.train$y~.,method="rf", data=vowel.train)
varImp(modelFit)
?randomForest
modelFit <- randomForest(vowel.train$y~.,data=vowel.train)
varImp(modelFit)
?varlmp
?varImp
importance(modelFit)
set.seed(33833)
modelFit <- randomForest(vowel.train$y~.,data=vowel.train)
importance(modelFit)
?order
kik = importance(modelFit)
order(kik)
kik[order(kik)]
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
cd ..
setwd("E:\\Documents\\Stats\\DataProducts presentation\\BetaDistExplore")
slidify("index.Rmd")
